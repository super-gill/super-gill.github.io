import { paths } from './types/api.js';
import { getTicketsResponse, getSoftwareLicensesResponse, getSoftwareLicenseResponse, postSoftwareLicenseRequest, postSoftwareLicenseResponse, getSuppliersResponse, getSupplierResponse, postSupplierRequest, getAttachmentsResponse, postAttachmentRequest, getUsersResponse, getCustomerResponse, getCustomersResponse, getAssetResponse, postCustomerRequest, getSitesResponse, postAssetRequest, getAssetsResponse, getAttachmentResponse, postAssetResponse, getActionsReponse, postSiteRequest, postSiteResponse, postAgentRequest, postAgentResponse, errorResponse, getActionResponse, postUserRequest, getUserResponse, postUserResponse, postCustomerResponse, getReportResponse, getReportsResponse, getQuotationsResponse, getQuotationResponse, getSalesOrdersResponse } from './types/halopsa.js';
export { getSoftwareLicensesResponse, getSoftwareLicenseResponse, postSoftwareLicenseRequest, postSoftwareLicenseResponse, getSuppliersResponse, getSupplierResponse, postSupplierRequest, getAttachmentsResponse, postAttachmentRequest, getUsersResponse, getCustomerResponse, getCustomersResponse, getAssetResponse, postCustomerRequest, getSitesResponse, postAssetRequest, getAssetsResponse, getAttachmentResponse, postAssetResponse, getActionsReponse, postSiteRequest, postSiteResponse, postAgentRequest, postAgentResponse, errorResponse, getActionResponse, postUserRequest, getReportResponse, getReportsResponse, };
export declare class haloPSA {
    protected hostname: string;
    protected client_id: string;
    protected client_secret: string;
    protected tenant: string;
    protected accessToken: string;
    protected tokenValidFrom: number;
    protected overloadTimer: number;
    /**
     *
     * @param hostname The hostname of the target Halo instance.
     * @param client_id The clientID of the application created in Halo.
     * @param client_secret The client secret of the application created in Halo.
     * @param tenant The target tenant to make requests to.
     */
    constructor(hostname: string, client_id: string, client_secret: string, tenant: string);
    /**
     * Retrives a token from Halo to use the API with the permissions provided to the Application in Halo.
     * This token expires an hour after creation. During this time, any token retrieval request will return the same access token.
     * @returns Nothing. Assuming the timer had expired, a new token is written to the "accessToken" variable in the class.
     */
    retrieveToken(): Promise<void>;
    getTickets(params?: {
        paginate?: boolean;
        page_size?: number;
        page_no?: number;
        order?: string;
        orderdesc?: boolean;
        ticketidonly?: boolean;
        view_id?: number;
        columns_id?: number;
        includecolumns?: boolean;
        includeslaactiondate?: boolean;
        includeslatimer?: boolean;
        includetimetaken?: boolean;
        includesupplier?: boolean;
        includerelease1?: boolean;
        includerelease2?: boolean;
        includerelease3?: boolean;
        includechildids?: boolean;
        includenextactivitydate?: boolean;
        list_id?: number;
        agent_id?: number;
        status_id?: number;
        requesttype_id?: number;
        supplier_id?: number;
        client_id?: number;
        site?: number;
        username?: string;
        user_id?: number;
        release_id?: number;
        asset_id?: number;
        itil_requesttype_id?: number;
        open_only?: boolean;
        closed_only?: boolean;
        unlinked_only?: boolean;
        contract_id?: number;
        withattachments?: boolean;
        team?: number[];
        agent?: number[];
        status?: number[];
        requesttype?: number[];
        itil_requesttype?: number[];
        category_1?: number[];
        category_2?: number[];
        category_3?: number[];
        category_4?: number[];
        sla?: number[];
        priority?: number[];
        products?: number[];
        flagged?: number[];
        excludethese?: number[];
        search?: string;
        searchactions?: boolean;
        datesearch?: string;
        startdate?: string;
        enddate?: string;
        search_user_name?: string;
        search_summary?: string;
        search_details?: string;
        search_reportedby?: string;
        search_version?: string;
        search_release1?: string;
        search_release2?: string;
        search_release3?: string;
        search_releasenote?: string;
        search_inventory_number?: string;
        search_oppcontactname?: string;
        search_oppcompanyname?: string;
    }): Promise<getTicketsResponse>;
    getOrderHeads(params?: paths['/SalesOrder']['get']['parameters']['query']): Promise<getSalesOrdersResponse>;
    getActions(params?: {
        count?: number;
        ticket_id?: number;
        excludesys?: boolean;
        conversationonly?: boolean;
        agentonly?: boolean;
        supplieronly?: boolean;
        excludeprivate?: boolean;
        includehtmlnote?: boolean;
        includehtmlemail?: boolean;
        includeattachments?: boolean;
        importantonly?: boolean;
        slaonly?: boolean;
        ischildnotes?: boolean;
    }): Promise<getActionsReponse>;
    getAction(params: {
        id: number;
        ticket_id: number;
        includeemail?: boolean;
        includedetails?: boolean;
        mostrecent?: boolean;
        agentonly?: boolean;
        emailonly?: boolean;
        nonsystem?: boolean;
    }): Promise<getActionResponse>;
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint. There is no official documentation for this one so good luck..
     * @returns An object containing the record count retrieved and an Array containg a brief version of the licence.
     */
    getSoftwareLicenses(params?: {
        client_id?: number;
        count?: number;
        paginate?: boolean;
        page_size?: number;
        page_no?: number;
        order?: string;
        orderdesc?: string;
        includedetails?: boolean;
    }): Promise<getSoftwareLicensesResponse>;
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint. There is no official documentation for this one so good luck..
     * @returns An object containing the full details of the selected Software License.
     */
    getSoftwareLicense(params: {
        id: number;
        client_id?: number;
        includedetails?: boolean;
    }): Promise<getSoftwareLicenseResponse>;
    /**
     *
     * @param softwareLicenseObject An object containg properties to complete the Software License item in Halo.
     * @returns The completed Software License object.
     */
    updateSoftwareLicense(softwareLicenseObject: postSoftwareLicenseRequest): Promise<postSoftwareLicenseResponse>;
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint.
     * @returns An object containing the record count retrieved and an Array containg a brief version of the Supplier. There is literally no documentation for what this returns.
     */
    getSuppliers(params?: {
        pageinate?: boolean;
        page_size?: number;
        page_no?: number;
        order?: string;
        orderdesc?: string;
        search?: string;
        count?: number;
        toplevel_id?: number;
        includeactive?: boolean;
        includeinactive?: boolean;
    }): Promise<getSuppliersResponse>;
    getSupplier(params: {
        id: number;
        includedetails?: boolean;
    }): Promise<getSupplierResponse>;
    /**
     *
     * @param supplierObject An object containg properties to complete the Supplier item in Halo.
     * @returns The completed Supplier object.
     */
    updateSupplier(supplierObject: postSupplierRequest): Promise<unknown>;
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint. See [https://halo.haloservicedesk.com/apidoc/resources/users](link) for more info.
     * @returns An object containing the record count retrieved and an Array containg a breif version of the user.
     */
    getUsers(params?: {
        pageinate?: boolean;
        page_size?: number;
        page_no?: number;
        order?: string;
        orderdesc?: boolean;
        search?: string;
        search_phonenumbers?: boolean;
        toplevel_id?: number;
        client_id?: number;
        site_id?: number;
        organisation_id?: number;
        department_id?: number;
        asset_id?: number;
        includeactive?: boolean;
        includeinactive?: boolean;
        approversonly?: boolean;
        excludeagents?: boolean;
        count?: number;
    }): Promise<getUsersResponse>;
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint. See [https://halo.haloservicedesk.com/apidoc/resources/client](link) for more info.
     * @returns An object containing the record count retrieved and an Array containg a breif version of the customer.
     */
    getCustomers(params?: {
        pageinate?: boolean;
        page_size?: number;
        page_no?: number;
        order?: string;
        orderdesc?: boolean;
        search?: string;
        toplevel_id?: number;
        includeinactive?: boolean;
        includeactive?: boolean;
        count?: number;
    }): Promise<getCustomersResponse>;
    getCustomer(params: {
        id: number;
        includedetails?: boolean;
        includeactivity?: boolean;
    }): Promise<getCustomerResponse>;
    /**
     *
     * @param id Halo asset ID of the target to vailidate existence of.
     * @returns boolean.
     */
    existsAsset(id: number): Promise<boolean>;
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint. See [https://halo.haloservicedesk.com/apidoc/resources/assets](link) for more info.
     * @param params.search Any value of a field associated with an asset in Halo.
     * @returns An object containing the record count retrieved and an Array containg a breif version of the asset.
     */
    getAssets(params?: {
        search?: string;
        assettype_id?: number;
        client_id?: number;
        site_id?: number;
    }): Promise<getAssetsResponse>;
    getAsset(params: {
        id: number;
        includedetails?: boolean;
        includediagramdetails?: boolean;
    }): Promise<getAssetResponse>;
    /**If an ID is provided, asset is updated. Else, asset is created. */
    updateAsset(assetObject: postAssetRequest): Promise<postAssetResponse>;
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint. See [https://halo.haloservicedesk.com/apidoc/resources/sites](link) for more info.
     * @returns An array of purely descriptive site data. Further detail requires a site lookup by ID.
     */
    getSites(params?: {
        pageinate?: boolean;
        page_size?: number;
        page_no?: number;
        order?: string;
        orderdesc?: string;
        search?: string;
        toplevel_id?: number;
        client_id?: number;
        includeinactive?: boolean;
        includeactive?: boolean;
        count?: number;
    }): Promise<getSitesResponse>;
    /**If an ID is provided, site is updated. Else, site is created. */
    updateSite(siteObject: postSiteRequest): Promise<postSiteResponse>;
    /**If an ID is provided, user is updated. Else, user is created. */
    updateUser(userObject: postUserRequest): Promise<postUserResponse>;
    /**
     * getUser
     */
    getUser(params: {
        id: number;
        includedetails?: boolean;
        includeactivity?: boolean;
        includepopups?: boolean;
    }): Promise<getUserResponse>;
    /**If an ID is provided, customer is updated. Else, customer is created. */
    updateCustomer(customerObject: postCustomerRequest): Promise<postCustomerResponse>;
    deleteCustomer(params: {
        id: number;
    }): Promise<void>;
    getAttachments(params?: {
        ticket_id?: number;
        action_id?: number;
        type?: number;
        unique_id?: number;
    }): Promise<getAttachmentsResponse>;
    getAttachment(params: {
        id: number;
        includedetails: boolean;
    }): Promise<getAttachmentResponse>;
    /**
     *
     * @param attachmentObject A object containing the properties for an attachment.
     * @returns A HTTP status code confirming or denying the update.
     */
    updateAttachment(attachmentObject: postAttachmentRequest): Promise<unknown>;
    updateAgent(agentObject: postAgentRequest): Promise<postAgentResponse>;
    getReports(params?: paths['/Report']['get']['parameters']['query']): Promise<getReportsResponse>;
    getReport(params: paths['/Report/{id}']['get']['parameters']['path'] & paths['/Report/{id}']['get']['parameters']['query']): Promise<getReportResponse>;
    deleteAgent(params: {
        id: number;
    }): Promise<void>;
    deleteSoftwareLicense(params: {
        id: number;
    }): Promise<void>;
    deleteAppointment(params: {
        id: number;
    }): Promise<void>;
    deleteAsset(params: {
        id: number;
    }): Promise<void>;
    deleteAttachment(params: {
        id: number;
    }): Promise<void>;
    deleteContract(params: {
        id: number;
    }): Promise<void>;
    deleteInvoice(params: {
        id: number;
    }): Promise<void>;
    deleteItem(params: {
        id: number;
    }): Promise<void>;
    deleteKnowledgeBaseArticle(params: {
        id: number;
    }): Promise<void>;
    deleteOpportunities(params: {
        id: number;
    }): Promise<void>;
    deleteProjects(params: {
        id: number;
    }): Promise<void>;
    getQuotations(params: paths['/Quotation']['get']['parameters']['query']): Promise<getQuotationsResponse>;
    getQuotation(params: paths['/Quotation/{id}']['get']['parameters']['path'] & paths['/Quotation/{id}']['get']['parameters']['query']): Promise<getQuotationResponse>;
    deleteQuotation(params: {
        id: number;
    }): Promise<void>;
    deleteReport(params: {
        id: number;
    }): Promise<void>;
    deleteSite(params: {
        id: number;
    }): Promise<void>;
    deleteStatus(params: {
        id: number;
    }): Promise<void>;
    deleteSupplier(params: {
        id: number;
    }): Promise<void>;
    deleteTeam(params: {
        id: number;
    }): Promise<void>;
    deleteTicketType(params: {
        id: number;
    }): Promise<void>;
    deleteTicket(params: {
        id: number;
    }): Promise<void>;
    deleteUser(params: {
        id: number;
    }): Promise<void>;
}

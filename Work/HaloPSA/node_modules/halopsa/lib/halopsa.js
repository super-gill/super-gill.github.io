import { got } from 'got';
export class haloPSA {
    hostname;
    client_id;
    client_secret;
    tenant;
    accessToken;
    tokenValidFrom;
    overloadTimer;
    /**
     *
     * @param hostname The hostname of the target Halo instance.
     * @param client_id The clientID of the application created in Halo.
     * @param client_secret The client secret of the application created in Halo.
     * @param tenant The target tenant to make requests to.
     */
    constructor(hostname, client_id, client_secret, tenant) {
        this.hostname = hostname;
        this.client_id = client_id;
        this.client_secret = client_secret;
        this.tenant = tenant;
        this.accessToken = '';
        this.tokenValidFrom = 0;
        this.overloadTimer = 0;
    }
    /**
     * Retrives a token from Halo to use the API with the permissions provided to the Application in Halo.
     * This token expires an hour after creation. During this time, any token retrieval request will return the same access token.
     * @returns Nothing. Assuming the timer had expired, a new token is written to the "accessToken" variable in the class.
     */
    async retrieveToken() {
        return new Promise(async (resolve, reject) => {
            if (this.tokenValidFrom >= new Date().getTime() / 1000 - 3480) {
                resolve();
            }
            else {
                let query = new URLSearchParams();
                query.append('grant_type', 'client_credentials');
                query.append('client_id', this.client_id);
                query.append('client_secret', this.client_secret);
                query.append('tenant', this.tenant);
                query.append('scope', 'all');
                try {
                    let response = await got.post({
                        url: `https://${this.hostname}/auth/token`,
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: query.toString(),
                        responseType: 'json',
                    });
                    this.tokenValidFrom = new Date().getTime() / 1000;
                    this.accessToken = response.body.access_token;
                    this.overloadTimer++;
                    resolve();
                }
                catch (error) {
                    reject(error);
                }
            }
        });
    }
    getTickets(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.paginate ? query.append('paginate', params.paginate.toString()) : null;
                params.page_size ? query.append('page_size', params.page_size.toString()) : null;
                params.page_no ? query.append('page_no', params.page_no.toString()) : null;
                params.order ? query.append('order', params.order) : null;
                params.orderdesc ? query.append('orderdesc', params.orderdesc.toString()) : null;
                params.ticketidonly ? query.append('ticketidonly', params.ticketidonly.toString()) : null;
                params.view_id ? query.append('view_id', params.view_id.toString()) : null;
                params.columns_id ? query.append('columns_id', params.columns_id.toString()) : null;
                params.includecolumns ? query.append('includecolumns', params.includecolumns.toString()) : null;
                params.includeslaactiondate
                    ? query.append('includeslaactiondate', params.includeslaactiondate.toString())
                    : null;
                params.includeslatimer ? query.append('includeslatimer', params.includeslatimer.toString()) : null;
                params.includetimetaken ? query.append('includetimetaken', params.includetimetaken.toString()) : null;
                params.includesupplier ? query.append('includesupplier', params.includesupplier.toString()) : null;
                params.includerelease1 ? query.append('includerelease1', params.includerelease1.toString()) : null;
                params.includerelease2 ? query.append('includerelease2', params.includerelease2.toString()) : null;
                params.includerelease3 ? query.append('includerelease3', params.includerelease3.toString()) : null;
                params.includechildids ? query.append('includechildids', params.includechildids.toString()) : null;
                params.includenextactivitydate
                    ? query.append('includenextactivitydate', params.includenextactivitydate.toString())
                    : null;
                params.list_id ? query.append('list_id', params.list_id.toString()) : null;
                params.agent_id ? query.append('agent_id', params.agent_id.toString()) : null;
                params.status_id ? query.append('status_id', params.status_id.toString()) : null;
                params.requesttype_id ? query.append('requesttype_id', params.requesttype_id.toString()) : null;
                params.supplier_id ? query.append('supplier_id', params.supplier_id.toString()) : null;
                params.client_id ? query.append('client_id', params.client_id.toString()) : null;
                params.site ? query.append('site', params.site.toString()) : null;
                params.username ? query.append('username', params.username) : null;
                params.user_id ? query.append('user_id', params.user_id.toString()) : null;
                params.release_id ? query.append('release_id', params.release_id.toString()) : null;
                params.asset_id ? query.append('asset_id', params.asset_id.toString()) : null;
                params.itil_requesttype_id ? query.append('itil_requesttype_id', params.itil_requesttype_id.toString()) : null;
                params.open_only ? query.append('open_only', params.open_only.toString()) : null;
                params.closed_only ? query.append('closed_only', params.closed_only.toString()) : null;
                params.unlinked_only ? query.append('unlinked_only', params.unlinked_only.toString()) : null;
                params.contract_id ? query.append('contract_id', params.contract_id.toString()) : null;
                params.withattachments ? query.append('withattachments', params.withattachments.toString()) : null;
                params.team ? query.append('team', params.team.toString()) : null;
                params.agent ? query.append('agent', params.agent.toString()) : null;
                params.status ? query.append('status', params.status.toString()) : null;
                params.itil_requesttype ? query.append('itil_requesttype', params.itil_requesttype.toString()) : null;
                params.category_1 ? query.append('category_1', params.category_1.toString()) : null;
                params.category_2 ? query.append('category_2', params.category_2.toString()) : null;
                params.category_3 ? query.append('category_3', params.category_3.toString()) : null;
                params.category_4 ? query.append('category_4', params.category_4.toString()) : null;
                params.sla ? query.append('sla', params.sla.toString()) : null;
                params.priority ? query.append('priority', params.priority.toString()) : null;
                params.products ? query.append('products', params.products.toString()) : null;
                params.flagged ? query.append('flagged', params.flagged.toString()) : null;
                params.excludethese ? query.append('excludethese', params.excludethese.toString()) : null;
                params.search ? query.append('search', params.search) : null;
                params.searchactions ? query.append('searchactions', params.searchactions.toString()) : null;
                params.datesearch ? query.append('datesearch', params.datesearch) : null;
                params.startdate ? query.append('startdate', params.startdate) : null;
                params.enddate ? query.append('enddate', params.enddate) : null;
                params.search_user_name ? query.append('search_user_name', params.search_user_name) : null;
                params.search_summary ? query.append('search_summary', params.search_summary) : null;
                params.search_details ? query.append('search_details', params.search_details) : null;
                params.search_reportedby ? query.append('search_reportedby', params.search_reportedby) : null;
                params.search_version ? query.append('search_version', params.search_version) : null;
                params.search_release1 ? query.append('search_release1', params.search_release1) : null;
                params.search_release2 ? query.append('search_release2', params.search_release2) : null;
                params.search_release3 ? query.append('search_release3', params.search_release3) : null;
                params.search_releasenote ? query.append('search_releasenote', params.search_releasenote) : null;
                params.search_inventory_number ? query.append('search_inventory_number', params.search_inventory_number) : null;
                params.search_oppcontactname ? query.append('search_oppcontactname', params.search_oppcontactname) : null;
                params.search_oppcompanyname ? query.append('search_oppcompanyname', params.search_oppcompanyname) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Tickets`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    getOrderHeads(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                Object.entries(params).forEach(([key, value]) => {
                    key && value ? query.append(key, String(value)) : null;
                });
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/SalesOrder`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    getActions(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.count ? query.append('count', params.count.toString()) : null;
                params.ticket_id ? query.append('ticket_id', params.ticket_id.toString()) : null;
                params.excludesys ? query.append('excludesys', params.excludesys.toString()) : null;
                params.conversationonly ? query.append('conversationonly', params.conversationonly.toString()) : null;
                params.agentonly ? query.append('agentonly', params.agentonly.toString()) : null;
                params.supplieronly ? query.append('supplieronly', params.supplieronly.toString()) : null;
                params.excludeprivate ? query.append('excludeprivate', params.excludeprivate.toString()) : null;
                params.includehtmlnote ? query.append('includehtmlnote', params.includehtmlnote.toString()) : null;
                params.includehtmlemail ? query.append('includehtmlemail', params.includehtmlemail.toString()) : null;
                params.includeattachments ? query.append('includeattachments', params.includeattachments.toString()) : null;
                params.importantonly ? query.append('importantonly', params.importantonly.toString()) : null;
                params.slaonly ? query.append('slaonly', params.slaonly.toString()) : null;
                params.ischildnotes ? query.append('ischildnotes', params.ischildnotes.toString()) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Actions`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    getAction(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.id ? query.append('id', params.id.toString()) : null;
                params.ticket_id ? query.append('ticket_id', params.ticket_id.toString()) : null;
                params.includeemail ? query.append('includeemail', params.includeemail.toString()) : null;
                params.includedetails ? query.append('includedetails', params.includedetails.toString()) : null;
                params.mostrecent ? query.append('mostrecent', params.mostrecent.toString()) : null;
                params.agentonly ? query.append('agentonly', params.agentonly.toString()) : null;
                params.emailonly ? query.append('emailonly', params.emailonly.toString()) : null;
                params.nonsystem ? query.append('nonsystem', params.nonsystem.toString()) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Action/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint. There is no official documentation for this one so good luck..
     * @returns An object containing the record count retrieved and an Array containg a brief version of the licence.
     */
    getSoftwareLicenses(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.client_id ? query.append('client_id', params.client_id.toString()) : null;
                params.count ? query.append('count', params.count.toString()) : null;
                params.paginate ? query.append('pageinate', params.paginate.toString()) : null;
                params.page_size ? query.append('page_size', params.page_size.toString()) : null;
                params.page_no ? query.append('page_no', params.page_no.toString()) : null;
                params.order ? query.append('order', params.order) : null;
                params.orderdesc ? query.append('orderdesc', params.orderdesc) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/SoftwareLicence`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint. There is no official documentation for this one so good luck..
     * @returns An object containing the full details of the selected Software License.
     */
    getSoftwareLicense(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.client_id ? query.append('client_id', params.client_id.toString()) : null;
                params.includedetails ? query.append('includedetails', params.includedetails.toString()) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/SoftwareLicence/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     *
     * @param softwareLicenseObject An object containg properties to complete the Software License item in Halo.
     * @returns The completed Software License object.
     */
    updateSoftwareLicense(softwareLicenseObject) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let response;
            try {
                response = await got.post({
                    url: `https://${this.hostname}/api/SoftwareLicence`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    json: [softwareLicenseObject],
                    responseType: 'json',
                });
            }
            catch (error) {
                reject(error);
            }
            if (response) {
                this.overloadTimer++;
                resolve(response.body);
            }
            else {
                reject();
            }
        });
    }
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint.
     * @returns An object containing the record count retrieved and an Array containg a brief version of the Supplier. There is literally no documentation for what this returns.
     */
    getSuppliers(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.pageinate ? query.append('client_id', params.pageinate.toString()) : null;
                params.count ? query.append('count', params.count.toString()) : null;
                params.pageinate ? query.append('pageinate', params.pageinate.toString()) : null;
                params.page_size ? query.append('page_size', params.page_size.toString()) : null;
                params.page_no ? query.append('page_no', params.page_no.toString()) : null;
                params.order ? query.append('order', params.order) : null;
                params.orderdesc ? query.append('orderdesc', params.orderdesc) : null;
                params.toplevel_id ? query.append('toplevel_id', params.toplevel_id.toString()) : null;
                params.includeactive ? query.append('includeactive', params.includeactive.toString()) : null;
                params.includeinactive ? query.append('includeinactive', params.includeinactive.toString()) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Supplier`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    getSupplier(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.includedetails ? query.append('includedetails', params.includedetails.toString()) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Supplier/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     *
     * @param supplierObject An object containg properties to complete the Supplier item in Halo.
     * @returns The completed Supplier object.
     */
    updateSupplier(supplierObject) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let response;
            try {
                response = await got.post({
                    url: `https://${this.hostname}/api/Supplier`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    json: [supplierObject],
                    responseType: 'json',
                });
            }
            catch (error) {
                reject(error);
            }
            if (response) {
                this.overloadTimer++;
                resolve(response.body);
            }
            else {
                reject();
            }
        });
    }
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint. See [https://halo.haloservicedesk.com/apidoc/resources/users](link) for more info.
     * @returns An object containing the record count retrieved and an Array containg a breif version of the user.
     */
    getUsers(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.pageinate ? query.append('pageinate', params.pageinate.toString()) : null;
                params.page_size ? query.append('page_size', params.page_size.toString()) : null;
                params.page_no ? query.append('page_no', params.page_no.toString()) : null;
                params.order ? query.append('order', params.order) : null;
                params.orderdesc ? query.append('orderdesc', params.orderdesc.toString()) : null;
                params.search ? query.append('search', params.search) : null;
                params.search_phonenumbers ? query.append('search_phonenumbers', params.search_phonenumbers.toString()) : null;
                params.toplevel_id ? query.append('toplevel_id', params.toplevel_id.toString()) : null;
                params.client_id ? query.append('client_id', params.client_id.toString()) : null;
                params.site_id ? query.append('site_id', params.site_id.toString()) : null;
                params.includeinactive ? query.append('includeinactive', params.includeinactive.toString()) : null;
                params.includeactive ? query.append('includeactive', params.includeactive.toString()) : null;
                params.approversonly ? query.append('approversonly', params.approversonly.toString()) : null;
                params.excludeagents ? query.append('excludeagents', params.excludeagents.toString()) : null;
                params.count ? query.append('count', params.count.toString()) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Users`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint. See [https://halo.haloservicedesk.com/apidoc/resources/client](link) for more info.
     * @returns An object containing the record count retrieved and an Array containg a breif version of the customer.
     */
    getCustomers(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.pageinate ? query.append('pageinate', params.pageinate.toString()) : null;
                params.page_size ? query.append('page_size', params.page_size.toString()) : null;
                params.page_no ? query.append('page_no', params.page_no.toString()) : null;
                params.order ? query.append('order', params.order) : null;
                params.orderdesc ? query.append('orderdesc', params.orderdesc.toString()) : null;
                params.search ? query.append('search', params.search) : null;
                params.toplevel_id ? query.append('toplevel_id', params.toplevel_id.toString()) : null;
                params.includeinactive ? query.append('includeinactive', params.includeinactive.toString()) : null;
                params.includeactive ? query.append('includeactive', params.includeactive.toString()) : null;
                params.count ? query.append('count', params.count.toString()) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Client`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    getCustomer(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.includedetails ? query.append('includedetails', params.includedetails.toString()) : null;
                params.includeactivity ? query.append('includeactivity', params.includeactivity.toString()) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Client/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     *
     * @param id Halo asset ID of the target to vailidate existence of.
     * @returns boolean.
     */
    existsAsset(id) {
        return new Promise(async (resolve) => {
            if (await this.getAsset({
                id: id,
            })) {
                resolve(true);
            }
            else {
                resolve(false);
            }
        });
    }
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint. See [https://halo.haloservicedesk.com/apidoc/resources/assets](link) for more info.
     * @param params.search Any value of a field associated with an asset in Halo.
     * @returns An object containing the record count retrieved and an Array containg a breif version of the asset.
     */
    getAssets(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.search ? query.append('search', params.search) : null;
                params.assettype_id ? query.append('assettype_id', params.assettype_id.toString()) : null;
                params.client_id ? query.append('client_id', params.client_id.toString()) : null;
                params.site_id ? query.append('site_id', params.site_id.toString()) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Asset`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    getAsset(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.includedetails ? query.append('includedetails', params.includedetails.toString()) : null;
                params.includediagramdetails
                    ? query.append('includediagramdetails', params.includediagramdetails.toString())
                    : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Asset/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**If an ID is provided, asset is updated. Else, asset is created. */
    updateAsset(assetObject) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                let response = await got.post({
                    url: `https://${this.hostname}/api/Asset`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    json: [assetObject],
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     *
     * @param params An object possibly containing search paramaters provided by the endpoint. See [https://halo.haloservicedesk.com/apidoc/resources/sites](link) for more info.
     * @returns An array of purely descriptive site data. Further detail requires a site lookup by ID.
     */
    getSites(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.pageinate ? query.append('pageinate', params.pageinate.toString()) : null;
                params.page_size ? query.append('page_size', params.page_size.toString()) : null;
                params.page_no ? query.append('page_no', params.page_no.toString()) : null;
                params.order ? query.append('order', params.order) : null;
                params.orderdesc ? query.append('orderdesc', params.orderdesc) : null;
                params.search ? query.append('search', params.search) : null;
                params.toplevel_id ? query.append('toplevel_id', params.toplevel_id.toString()) : null;
                params.client_id ? query.append('client_id', params.client_id.toString()) : null;
                params.includeinactive ? query.append('includeinactive', params.includeinactive.toString()) : null;
                params.includeactive ? query.append('includeactive', params.includeactive.toString()) : null;
                params.count ? query.append('count', params.count.toString()) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Site`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**If an ID is provided, site is updated. Else, site is created. */
    updateSite(siteObject) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                let response = await got.post({
                    url: `https://${this.hostname}/api/Site`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    json: [siteObject],
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**If an ID is provided, user is updated. Else, user is created. */
    updateUser(userObject) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                let response = await got.post({
                    url: `https://${this.hostname}/api/Users`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    json: [userObject],
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     * getUser
     */
    getUser(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.includedetails ? query.append('includedetails', params.includedetails.toString()) : null;
                params.includeactivity ? query.append('includeactivity', params.includeactivity.toString()) : null;
                params.includepopups ? query.append('includepopups', params.includepopups.toString()) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Users/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**If an ID is provided, customer is updated. Else, customer is created. */
    updateCustomer(customerObject) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                let response = await got.post({
                    url: `https://${this.hostname}/api/Client`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    json: [customerObject],
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteCustomer(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Client/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    getAttachments(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.ticket_id ? query.append('ticket_id', params.ticket_id.toString()) : null;
                params.action_id ? query.append('action_id', params.action_id.toString()) : null;
                params.type ? query.append('type', params.type.toString()) : null;
                params.unique_id ? query.append('unique_id', params.unique_id.toString()) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Attachment`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    getAttachment(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                params.includedetails ? query.append('includedetails', params.includedetails.toString()) : null;
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Attachment/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     *
     * @param attachmentObject A object containing the properties for an attachment.
     * @returns A HTTP status code confirming or denying the update.
     */
    updateAttachment(attachmentObject) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                let response = await got.post({
                    url: `https://${this.hostname}/api/Attachment`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    json: [attachmentObject],
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    updateAgent(agentObject) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                let response = await got.post({
                    url: `https://${this.hostname}/api/Agent`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    json: [agentObject],
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    getReports(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                Object.entries(params).forEach(([key, value]) => {
                    key && value ? query.append(key, String(value)) : null;
                });
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Report`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    getReport(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                Object.entries(params).forEach(([key, value]) => {
                    key && value ? query.append(key, String(value)) : null;
                });
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Report/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteAgent(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Agent/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteSoftwareLicense(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/SoftwareLicence/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteAppointment(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Appointment/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteAsset(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Asset/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteAttachment(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Attachment/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteContract(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/ClientContract/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteInvoice(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Invoice/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteItem(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Item/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteKnowledgeBaseArticle(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/KBArticle/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteOpportunities(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Opportunities/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteProjects(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Projects/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    getQuotations(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                Object.entries(params).forEach(([key, value]) => {
                    key && value ? query.append(key, String(value)) : null;
                });
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Quotation`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    getQuotation(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            let query = new URLSearchParams();
            if (params) {
                Object.entries(params).forEach(([key, value]) => {
                    key && value ? query.append(key, String(value)) : null;
                });
            }
            try {
                let response = await got.get({
                    url: `https://${this.hostname}/api/Quotation/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    searchParams: query,
                    responseType: 'json',
                });
                this.overloadTimer++;
                resolve(response.body);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteQuotation(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Quotation/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteReport(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Report/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteSite(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Site/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteStatus(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Status/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteSupplier(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Supplier/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteTeam(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Team/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteTicketType(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/TicketType/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteTicket(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Tickets/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    deleteUser(params) {
        return new Promise(async (resolve, reject) => {
            await this.retrieveToken();
            try {
                await got.delete({
                    url: `https://${this.hostname}/api/Users/${params.id}`,
                    headers: {
                        Authorization: `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                    },
                });
                this.overloadTimer++;
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
}
